# Simulate a tree with three leaves and calculate the total tree length.
# first coalescent event exponential with rate 3 choose 2 (scaled units of time, N generations)
# second coalescent event exponential with rate 2 choose 2
# sum to get overall tree length
CoalTimes = rexp(2, rate = c(3,1))
T_3 = sum(CoalTimes)
T_3
# now need to convert to normal time (in generations), which means multiply T_3 by 100000 (N, population)
T_3_unscaled = 100000*T_3
T_3_unscaled
# ^ the simulated coalescent time in generations
###########
# What is expected number of mutations, with rate 10^(-6) mutations/site/generation/individual and 1000 bp/individual.
# It's a Poisson process! Rate = 10^(-6), but 1000 bp per indiv, so * 1000. Convert to scaled time by * 10000. Multiply by appropriate time (scaled) to get expectated number of mutations.
# Need to do twice once the tree splits into two, then three times after the next coalescent event, to get total number of mutations.
ScaMutRate = 10^(-6) * 100000 * 1000
ScaMutRate
ExpMutations = ScaMutRate*2*CoalTimes[1] + ScaMutRate*3*CoalTimes[2]
ExpMutations
# Okay now need to do this 1000 times, then find mean and variance.
Y = c(rep(0,1000))
for (i in 1:1000 ) {
NewCoalTimes = rexp(2, rate = c(3,1))
Y[i] = ScaMutRate*2*NewCoalTimes[1] + ScaMutRate*3*NewCoalTimes[2]
}
mean(Y)
var(Y)
t3 = runif(1,min=0,max=3)
t3
t3 = runif(1,min=0,max=3)
NewCoalTimes = rexp(2, rate = c(3,1))
q
NewCoalTimes
Y = c(rep(0,1000))
for (i in 1:1000 ) {
NewCoalTimes = rexp(2, rate = c(3,1))
Time = 2*NewCoalTimes[1] + 3*NewCoalTimes[2]
Y[i] = rpois(1, lambda = Time * ScaMutRate)
}
mean(Y)
var(Y)
Y
Y = matrix(c(rep(0,2000)),1000,2)
Y
ScaMutRate = 10^(-6) * 100000 * 1000
counter = 0
sample_size = 1000
Y = matrix(c(rep(0,2000)),1000,2)
while (counter < sample_size) {
CoalTime = rexp(2, rate = c(3,1)) # Sample theta* parameters from our prior.
TotalTime = 2*CoalTime[1] + 3*CoalTime[2]
Mutations = rpois(1, lambda = TotalTime * ScaMutRate)
if (Mutations == 300) {
Y[c(i,1)] = CoalTime[1]
Y[c(i,2)] = CoalTime[2]
counter = counter + 1
}
}
Y
while (counter < sample_size) {
CoalTime = rexp(2, rate = c(3,1)) # Sample theta* parameters from our prior.
TotalTime = 2*CoalTime[1] + 3*CoalTime[2]
Mutations = rpois(1, lambda = TotalTime * ScaMutRate)
if (Mutations == 300) {
Y[c(counter,1)] = CoalTime[1]
Y[c(counter,2)] = CoalTime[2]
print(CoalTime)
counter = counter + 1
}
}
while (counter < sample_size) {
CoalTime = rexp(2, rate = c(3,1)) # Sample theta* parameters from our prior.
TotalTime = 2*CoalTime[1] + 3*CoalTime[2]
Mutations = rpois(1, lambda = TotalTime * ScaMutRate)
if (Mutations == 300) {
Y[c(counter,1)] = CoalTime[1]
Y[c(counter,2)] = CoalTime[2]
return(CoalTime)
counter = counter + 1
}
}
ScaMutRate = 10^(-6) * 100000 * 1000
counter = 0
sample_size = 1000
Y = matrix(c(rep(0,2000)),1000,2)
while (counter < sample_size) {
CoalTime = rexp(2, rate = c(3,1)) # Sample theta* parameters from our prior.
TotalTime = 2*CoalTime[1] + 3*CoalTime[2]
Mutations = rpois(1, lambda = TotalTime * ScaMutRate)
if (Mutations == 300) {
Y[c(counter,1)] = CoalTime[1]
Y[c(counter,2)] = CoalTime[2]
return(CoalTime)
counter = counter + 1
}
}
ScaMutRate = 10^(-6) * 100000 * 1000
counter = 0
sample_size = 1000
Y = matrix(c(rep(0,2000)),1000,2)
while (counter < sample_size) {
CoalTime = rexp(2, rate = c(3,1)) # Sample theta* parameters from our prior.
TotalTime = 2*CoalTime[1] + 3*CoalTime[2]
Mutations = rpois(1, lambda = TotalTime * ScaMutRate)
if (Mutations == 300) {
Y[c(counter,1)] = CoalTime[1]
Y[c(counter,2)] = CoalTime[2]
CoalTime
counter = counter + 1
}
}
Y
print(CoalTime)
ScaMutRate = 10^(-6) * 100000 * 1000
counter = 1
sample_size = 1000
X = c(rep(0,1000))
Y = c(rep(0,1000))
while (counter < sample_size) {
CoalTime = rexp(2, rate = c(3,1)) # Sample theta* parameters from our prior.
TotalTime = 2*CoalTime[1] + 3*CoalTime[2]
Mutations = rpois(1, lambda = TotalTime * ScaMutRate)
if (Mutations == 300) {
X[counter] = CoalTime[1]
Y[counter] = CoalTime[2]
CoalTime
counter = counter + 1
}
}
X
Y
